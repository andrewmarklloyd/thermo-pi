#!/bin/bash

#https://github.com/chovy/node-startup/blob/master/init.d/node-app

### BEGIN INIT INFO
# Provides: node
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop node
# Description: Node process for app
### END INIT INFO

###############

USAGE="Usage: $0 {start|stop|restart|status}"
APP_DIR="/home/pi/thermo-pi"
APP_NAME="thermo-pi"
CONFIG_DIR=/srv/thermo-pi
INIT_FILE=${CONFIG_DIR}/initialized.json
PID_DIR="$CONFIG_DIR/pid"
PID_FILE_WORKER="$PID_DIR/thermo-pi-worker.pid"
PID_FILE_MASTER="$PID_DIR/thermo-pi-master.pid"
LOG_DIR="$CONFIG_DIR/log"
LOG_FILE="$LOG_DIR/$APP_NAME.log"
SYSTEM_UNAME=$(uname)
GROUP="$USER"
KWARGS=""
FORCE_OP=true

# if [ "$(id -u)" != "0" ]; then
#    echo "This script must be run as root" 1>&2
#    exit 1
# fi

pid_file_master_exists() {
  [[ -f "$PID_FILE_MASTER" ]]
}

pid_file_worker_exists() {
  [[ -f "$PID_FILE_WORKER" ]]
}

get_pid_master() {
  echo "$(cat "$PID_FILE_MASTER")"
}

get_pid_worker() {
  echo "$(cat "$PID_FILE_WORKER")"
}

is_master_running() {
  PID="$(get_pid_master)"
  [[ -d /proc/$PID ]]
}

is_worker_running() {
  PID="$(get_pid_worker)"
  [[ -d /proc/$PID ]]
}

# findProcess() {
#   port=$1
#   pid=`netstat -anp 2>/dev/null | grep -w ":${port}" | awk '{print $7}'`
#   pid=${pid%/*}
#   echo $pid
# }

stop_processes() {
  PID_MASTER=$(get_pid_master)
  echo "Killing master process: $PID_MASTER"
  kill $PID_MASTER
  wait $PID_MASTER 2>/dev/null

  PID_WORKER=$(get_pid_worker)
  echo "Killing worker process: $PID_WORKER"
  kill $PID_WORKER
  wait $PID_WORKER 2>/dev/null
}

remove_pid_files() {
  echo "Removing master pid file"
  rm -f "$PID_FILE_MASTER"

  echo "Removing worker pid file"
  rm -f "$PID_FILE_WORKER"
}

logs() {
  cat $LOG_FILE
}

start_it() {
  mkdir -p "$PID_DIR"
  chown $USER:$GROUP "$PID_DIR"
  mkdir -p "$LOG_DIR"
  chown $USER:$GROUP "$LOG_DIR"

  APP_DIR=/home/pi/thermo-pi/worker-node
  initCommand="npm run init --prefix ${APP_DIR}"
  startCommand="npm start --prefix ${APP_DIR}"

  if [[ ! -f ${INIT_FILE} ]]; then
    command=${initCommand}
  else
    command=${startCommand}
  fi
  echo "Starting ${APP_NAME} ..."
  echo "if [[ $? -ne 0 ]]; then
      exit
    fi
    set -a
    eval $command &>> \"$LOG_FILE\" &
    echo \$! > $PID_FILE" | sudo -i -u $USER
  echo "$APP_NAME started with pid $(get_pid_worker)"
}

start_app() {
  if pid_file_worker_exists
  then
    if is_worker_running
    then
      PID=$(get_pid)
      echo "$APP_NAME already running with pid $PID"
      exit 1
    else
      echo "$APP_NAME stopped, but pid file exists"
      if [[ $FORCE_OP = true ]]
      then
        echo "Forcing start anyways"
        remove_pid_files
        start_it
      fi
    fi
  else
    start_it
  fi
}

stop_app() {
  if pid_file_worker_exists
  then
    if is_worker_running
    then
      echo "Stopping $APP_NAME ..."
      stop_processes
      remove_pid_files
      echo "$APP_NAME stopped"
    else
      echo "$APP_NAME already stopped, but pid file exists"
      if [[ $FORCE_OP = true ]]
      then
        echo "Forcing stop anyways ..."
        remove_pid_files
        echo "$APP_NAME stopped"
      else
        exit 1
      fi
    fi
  else
    echo "$APP_NAME already stopped, pid file does not exist"
    exit 1
  fi
}

status_app() {
  if pid_file_worker_exists
  then
    if is_worker_running
    then
      PID=$(get_pid_worker)
      echo "$APP_NAME running with pid $PID"
    else
      echo "$APP_NAME stopped, but pid file exists"
    fi
  else
    echo "$APP_NAME stopped"
  fi
}

case "$1" in
  start)
    start_app
  ;;

  stop)
    stop_app
  ;;

  restart)
    stop_app
    start_app
  ;;

  status)
    status_app
  ;;

  logs)
    logs
  ;;

  *)
    echo $USAGE
    exit 1
  ;;
esac
