#!/bin/bash

#https://github.com/chovy/node-startup/blob/master/init.d/node-app

### BEGIN INIT INFO
# Provides: node
# Required-Start:    $network $remote_fs $local_fs
# Required-Stop:     $network $remote_fs $local_fs
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop node
# Description: Node process for app
### END INIT INFO

###############

NPM_EXE=$(which npm)
NODE_EXE=$(which node)
USAGE="Usage: $0 {start|stop|restart|status|logs [-f|-a]}"
APP_DIR="/home/pi/thermo-pi"
APP_NAME="thermo-pi"
CONFIG_DIR=/srv/thermo-pi
INIT_FILE=${CONFIG_DIR}/initialized.json
PID_DIR="$CONFIG_DIR/pid"
PID_FILE="$PID_DIR/thermo-pi.pid"
LOG_DIR="$CONFIG_DIR/log"
LOG_FILE="$LOG_DIR/$APP_NAME.log"
SYSTEM_UNAME=$(uname)
GROUP="$USER"
KWARGS=""
FORCE_OP=true


# if [ "$(id -u)" != "0" ]; then
#    echo "This script must be run as root" 1>&2
#    exit 1
# fi

pid_file_exists() {
  [[ -f "$PID_FILE" ]]
}

get_pid() {
  echo "$(cat "$PID_FILE")"
}

is_running() {
  PID="$(get_pid)"
  [[ -d /proc/$PID ]]
}

kill_descendants () {
  local child=$(ps -o pid= --ppid "$1")

  for pid in $child; do
    if [[ ! -z $pid ]]; then
      kill_descendants "$pid"
    fi
  done
  if [[ ! -z $child ]]; then
    echo "Killing process: $child"
    kill "$child"
    while [[ -e /proc/$child ]]; do
      echo "Process: $child is still running"
      sleep 1
    done
  fi
}

stop_process() {
  PID=$(get_pid)
  kill_descendants $PID
  kill $PID
  echo "Process $PID has finished"
}

remove_pid_file() {
  echo "Removing pid file"
  rm -f "$PID_FILE"
}

logs() {
  case "$1" in
    "-f")
      tail -f $LOG_FILE
    ;;

    "-a")
      cat $LOG_FILE
    ;;

    *)
      tail $LOG_FILE
    ;;
  esac
}

start_it() {
  mkdir -p "$PID_DIR"
  chown $USER:$GROUP "$PID_DIR"
  mkdir -p "$LOG_DIR"
  chown $USER:$GROUP "$LOG_DIR"

  APP_DIR=/home/pi/thermo-pi/worker-node
  initCommand="${NPM_EXE} run init --prefix ${APP_DIR}"
  startCommand="${NPM_EXE} start --prefix ${APP_DIR}"

  echo "Starting ${APP_NAME} ..."
  set -a
  if [[ ! -f ${INIT_FILE} ]]; then
    ${NPM_EXE} run init --prefix ${APP_DIR} &>> $LOG_FILE &
  else
    ${NPM_EXE} start --prefix ${APP_DIR} &>> $LOG_FILE &
  fi
  echo $! > $PID_FILE
  echo "$APP_NAME started with pid $(get_pid)"
}

start_app() {
  if pid_file_exists; then
    if is_running; then
      PID=$(get_pid)
      echo "$APP_NAME already running with pid $PID"
      exit 1
    else
      echo "$APP_NAME stopped, but pid file exists"
      if [[ $FORCE_OP = true ]]; then
        echo "Forcing start anyways"
        remove_pid_file
        start_it
      fi
    fi
  else
    start_it
  fi
}

stop_app() {
  if pid_file_exists; then
    if is_running; then
      echo "Stopping $APP_NAME ..."
      stop_process
      remove_pid_file
      echo "$APP_NAME stopped"

    else
      echo "$APP_NAME already stopped, but pid file exists"
      if [[ $FORCE_OP = true ]]; then
        echo "Forcing stop anyways ..."
        remove_pid_file
        echo "$APP_NAME stopped"
      else
        exit 1
      fi
    fi
  else
    echo "$APP_NAME already stopped, pid file does not exist"
    exit 1
  fi
}

status_app() {
  if pid_file_exists; then
    if is_running; then
      PID=$(get_pid)
      echo "$APP_NAME running with pid $PID"
    else
      echo "$APP_NAME stopped, but pid file exists"
    fi
  else
    echo "$APP_NAME stopped"
  fi
}

case "$1" in
  start)
    start_app
  ;;

  stop)
    stop_app
  ;;

  restart)
    stop_app
    start_app
  ;;

  status)
    status_app
  ;;

  logs)
    logs $@
  ;;

  *)
    echo $USAGE
    exit 1
  ;;
esac
